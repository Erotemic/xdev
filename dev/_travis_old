env:
    global:
        - secure: "E3YKGyGmGCEmNhoXmsz6ZEbQrqT9rVjy7a8v/H1AlwSruJnaYw4Kgcjb3tw41KxcgMkZpGGF8QLPs394IPiR3360mPvpq5IgJ0vd57Xqg5koRWmCNv5V0rJqjAWmZc1PjN3cBsTD74Jy5s4ZxNy/qSv4TegKtF2ZaWDnR9abzXmf1wdForXpwmqULiPfxdrCSlKmMopA4iiFVHGniH+1x3Bi2BIKI5uw5C2kbSKnTaN8be/Iv3FNs8+ChVTXSEjkhJhuXDj61JO7+iBGXuMxWzwG0ciqGHGABR/xaBmRiOQCCi3pox8ARQZ/RNAZCdknkx9Ub3sP3jMs0z7JATQAOLqGMJ9PCwqXWogLaChgVN1gPHN9ub+vSs83oj3hyzVAACNK5kHoq54GMZM7gzYXTPayH44Icw1lhEVXR+7A9cCFP1tWYgZMssW1eAQDwDOeqvu5+/93/c6quwJ1ixqLxOK003fEaz/DVHItkKIZwCvv07qtV05podB5oVVNVX1JmBONpetcoxSC9kEGpDymxgJIMHZRk5V65Twxa2dB7vVWtrq+ee6qD2vdkjqePa24Fy1VzXhz8aCnwsfwwr5GvrXgluPN+f5n5UR3FoWZsZFlSDeN/vdxZ2+xb4saeSA54973yr4x/X46UqNeBYH9LNq2KdF3ACYeFj7QBp+oEyU="

        - secure: "rJeKWNdkCDp4wzgE5KecO+KYqaZFoUzNiYOVNIs684Lwj558riTldA3Skpg2WzKl1zFoLK45rHYiSg2ToK/ufrJlkCm0uscwiXikyT0n/EufkJC8X1xm9Ujty6blC8WOFdkrmBcmBIZcAo106qeYKc0hRVPIsXsrZosdaLXpAUsNfYCayX54gE+Ajz0d3mDK3sbBRZza+o2TbxV5QmspDAZpaLqxgWV598km2H7l20eRBophQUSaD1LOzaTK7WX2whmxeWaVvv/s9EwX70zCyv3KNmVlwWcQiJ5CF3dlQpNFVno7VVUsdW/LZ2R/jTYgZ1Ph4HUHjEX2MuT0oDI6QfWZXk42jjEZEP2PCNEDWIKgi5WG7o+RtgeE3URFa7M/THOfWa7Am/O9CUKZTDhMLaU3gbY9JDiTi6ubOe8aKlkUzr8VFHcN6Qq3c/yeCAWlTbuXHAL7mhS5bYtNoGddxQO2KhQPRZ5DdyBUYvFmy+iar5jzCEZyiT6e+KlzzRwO/q45IgmVoew8KYa5ZyYRAfzW952zd052Z1TpZGcZ9AI8TZcIVYL2pE/C/jWuuxhWjL/FfQFf2S9P7UP/bybOtqoeduL9dKAXtnIrhQ/RL3J0YrTvxL/mf9hDx2itd6Fpx8SvDG1x/Qrz7dOLoR+lPh2NMMCN6Npe5/QCRevaFEY="

        - secure: "mhddLIuV2BugQmbomCpVIN1jqaXo1NvkYIHrlIxdMZgaXeC3IA4WABVGeyIkKxoGdA0joVWGZdWzCHckWXzPtpB3u5FrXgs+2gFsO1BQng3yCrkcVkqEUC1OxrseOUE3Qd+YAtHqaKVSZnv2beM8WG585vlVbqLHaBnlXLXB88vQBaNfKv+Ov1PBAIBGM8ya9z6egDWZSmJ9PMGFPjf6+XIra6G2zsoCdp1P1Pc5HjtJfmAgrJQyXenl72UDtpYXuErrLm5VynSQ7eIZFboaa6RWjKREEigyEIEYFQiWBLHURa/ICcVw5ioMr9HxXSUhJ1ByhHkFzZ73vRN45RiKK5alNuLGLH9Ykfb5WMkhjzXvflx6QsoymnqOP/Yfl4OLRv0i9TK8WLD+u9VYqP1MjKHlKw7TzvcgHT11RF2g0y8kj3+7kuYKQiC01N7PJN2++hRt6UtdEzPQGJm9cjYttgldZY74DlzBtSfcESIplO/WkLxLJKWfxRczdZrzazNkxUyp/VMcZ+YGuACjptDFU6qmB8DFYhNwlklHPCDnOrjVQMzCNSRjJZcLKwZ1eVvI/vbyNDmt9lU+fCtpFu7POEATFJlpnybk2EqbVq5zl5L+A34Hy6f1K5sZ2lK6ocvqKhc1Mil9x3+8tzUPHVDDe8GVeNHtuiHXBvTr4TODkIA="

language: python
sudo: false

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache
        - $HOME/gpg_install_prefix
        - $HOME/.cache/pip
        - $HOME/download

python:
  - "2.7"
  - "3.5"
  - "3.6"
  - "3.7"
  - "3.8"

before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - travis_retry pip install -e .
    
script: 
  - travis_wait ./run_tests.py

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET

        # encrypt relevant travis variables (requires travis cli)
        #sudo apt install ruby ruby-dev -y
        #sudo gem install travis
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt CI_GITHUB_SECRET=$CI_GITHUB_SECRET

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with CI secret
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $KEYID > dev/public_gpg_key

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key

        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # try and have travis cache this
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"

        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$TWINE_PASSWORD \
            TWINE_USERNAME=$TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh

